/*   Syntax definition for the input to the CALC demonstartion program.  The
/*   CALC program implements basic calculator functions as a demonstration of
/*   using the syntaxer.
/*
.symbol pad                            /* separator allowed but not required
.symbol space                          /* one separator required, more allowed
.symbol symbol                         /* name of a symbol, like a variable
.symbol notsym                         /* not a symbol name character
.symbol number                         /* numeric literal
.symbol value                          /* numeric value
.symbol command                        /* one command
.symbol expression                     /* series of commands
.symbol oneline [syn_ch_oneline]       /* one complete input line

.define pad .as                        /* separator allowed
  .occurs[0 to inf] " "

.define space .as                      /* separator required
  (.occurs[1 to inf] " ") .or
  .upto .eol

.define symbol .as                     /* symbol name
  .range["A" thru "Z"]
  .charcase[upper]
  .occurs[0 to inf] (
    .range["A" thru "Z"] .or
    .range["0" thru "9"]
    )

.define notsym .as                     /* not a symbol name char, nothing consumed
  .charcase[upper] .upto .not (
    (.range["A" thru "Z"]) .or
    (.range["0" thru "9"])
    )

.define number .as                     /* literal numeric value
  ("+"[1] .or "-"[2] .or .null[1])     /* optional leading sign
  ("h" .charcase[upper]                /* hexidecimal integer
    (
      .occurs[1 to inf] (
        .range["0" thru "9"] .or
        .range["A" thru "F"]
        )
      )[1]
    ) .or
  ("b" .charcase[upper]                /* binary integer
    (
      .occurs[1 to inf] .range["0" thru "1"]
      )[2]
    ) .or
  (                                    /* decimal floating point
    (
      .occurs[0 to inf] .range["0" thru "9"]
      "."
      .occurs[0 to inf] .range["0" thru "9"]
      .optional (
        "e"
        ("+" .or "-" .or .null)
        .occurs[1 to inf] .range["0" thru "9"]
        )
      )[3]
    ) .or
  (.occurs[1 to inf] .range["0" thru "9"])[4] /* decimal integer

.define value .as                      /* numeric value
  number[1] .or
  symbol[2] .or
  ("(" pad expression[3] pad ")") .or
  ("pi"[4] notsym) .or
  ("e"[5] notsym)

.define command .as                    /* one command
  (space value[1]) .or
  ("+" pad value[6]) .or
  ("-" pad value[7]) .or
  pad
  ("sqrt"[2] notsym) .or
  ("ln"[3] notsym) .or
  ("log2"[5] notsym) .or
  ("log"[4] notsym) .or
  ("*" pad value[8]) .or
  ("/" pad value[9]) .or
  ("^" pad value[10]) .or
  ("set" space symbol[11] notsym) .or
  ("\"[13]) .or
  ("q"[12] notsym) .or
  (value[1]) .or
  ("+" pad value[6]) .or
  ("-" pad value[7])

.define expression .as                 /* sequence of commands
  .occurs[1 to inf] command

.define oneline .as                    /* one complete input line
  (expression .or .null) pad
  .eol
  .occurs[0 to inf] .eof

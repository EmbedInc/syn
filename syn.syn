/*   Syntax definition of the syntax definition language.
/*
.symbol pad[syn_chsyn_pad]
.symbol space[syn_chsyn_space]
.symbol integer[syn_chsyn_integer] external
.symbol symbol[syn_chsyn_symbol] external
.symbol end_range[syn_chsyn_end_range] external
.symbol char[syn_chsyn_char] external
.symbol string[syn_chsyn_string] external
.symbol untagged_item[syn_chsyn_untagged_item]
.symbol item[syn_chsyn_item]
.symbol expression[syn_chsyn_expression]
.symbol define[syn_chsyn_define]
.symbol declare[syn_chsyn_declare]
.symbol command[syn_chsyn_command]

.define PAD .as
  .occurs [0 to INF] (
    ' '
    .or .EOL
    .or .EOF
    .or ('/*' .occurs [0 to INF] .range [' ' thru '~'] .EOL)
    )

.define SPACE .as
  (' ' .or .eol)
  pad

/* .define INTEGER .as
/*   .occurs [1 to INF] .range ['0' thru '9']
/*
/* .define SYMBOL .as
/*   .range ['a' thru 'z']
/*   .occurs [0 to 31] (
/*     .range ['a' thru 'z']
/*     .or .range ['0' thru '9']
/*     .or '_'
/*     .or '$'
/*     )

/* .define CHAR .as
/*       ("'" (.range [' ' thru '&'] .or .range ['(' thru '~'])[1] "'")
/*   .or ('"' (.range [' ' thru '!'] .or .range ['#' thru '~'])[1] '"')

/* .define STRING .as
/*   (
/*     "'"
/*     (.occurs [0 to INF] (.range [' ' thru '&'] .or .range ['(' thru '~']))[1]
/*     "'"
/*     )
/*   .or
/*   (
/*     '"'
/*     (.occurs [0 to INF] (.range [' ' thru '!'] .or .range ['#' thru '~']))[1]
/*     '"'
/*     )

/* .define END_RANGE .as
/*   integer[1] .or 'inf'[2]

.define UNTAGGED_ITEM .as
  ('(' pad expression[7] pad ')')
  .or '.eol'[1]
  .or '.eof'[2]
  .or '.eod'[12]
  .or ('.range' pad '[' pad char[1] space 'thru' space char[1] pad ']')[5]
  .or ('.occurs' pad '[' pad integer[1] space 'to' space end_range pad ']'
    space item)[6]
  .or ('.charcase' pad '[' pad
    ('upper'[1] .or 'lower'[2] .or 'off'[3])
    pad ']')[8]
  .or ('.upto'[10] space item)
  .or ('.not'[11] space item)
  .or '.null'[9]
  .or ('.optional' space item[13])
  .or symbol[3]
  .or string[4]

.define ITEM .as
  untagged_item
  ('[' integer[1] ']') .or .null[2]

.define EXPRESSION .as
  item
  (
    space
    ('.or' space expression[2])
    .or expression[1]
    )
  .or .null[3]

.define DEFINE .as
  '.define' space symbol[1] space '.as' space expression[1]

.define DECLARE .as
  '.symbol' space
  symbol[1] pad
  .optional (
    '[' symbol[1] ']'
    .optional (space 'external'[2])
    )

.define COMMAND .as
  .charcase [lower]
  pad (
    .EOD[1]
    .or define[2]
    .or declare[3]
    )
